Let's analyze the complexity of this code:

**calculate_factorial(n) function:**

* The function has a recursive structure, where it calls itself with `n-1` as an argument until `n` reaches 0.
* The number of recursive calls is equal to `n`, since the function calls itself `n` times until it reaches the base case (`n == 0`).
* In each recursive call, the function performs a constant amount of work ( multiplication and a function call).
* Therefore, the time complexity of the `calculate_factorial` function is O(n), where n is the input parameter.

**is_prime(num) function:**

* The function has a loop that iterates from 2 to `num-1`.
* In each iteration, the function performs a constant amount of work (a modulus operation and a conditional check).
* The number of iterations is `num-1`, which makes the time complexity of the `is_prime` function O(n), where n is the input parameter.

**Overall complexity:**

* The `calculate_factorial` function is called with `n=5`, which has a time complexity of O(5) = O(1) (since 5 is a constant).
* The `is_prime` function is called with `num=11`, which has a time complexity of O(11) = O(1) (since 11 is a constant).
* Since both function calls have a constant time complexity, the overall complexity of the code is O(1).

However, it's worth noting that if the input parameters `n` and `num` were not constants, the overall complexity would be O(n) due to the recursive structure of the `calculate_factorial` function and the loop in the `is_prime` function.