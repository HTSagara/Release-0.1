I'd be happy to analyze the complexity of this code!

**calculate_factorial(n) function:**

* Time complexity: O(n)
The time complexity of the `calculate_factorial` function is O(n) because it makes recursive calls until `n` reaches 0. Each recursive call decrements `n` by 1, so the number of calls is directly proportional to `n`.

* Space complexity: O(n)
The space complexity of the `calculate_factorial` function is O(n) because each recursive call adds a new layer to the call stack. The maximum depth of the recursion tree is `n`, so the space complexity is O(n).

**is_prime(num) function:**

* Time complexity: O(n)
The time complexity of the `is_prime` function is O(n) because it iterates from 2 to `num` to check for divisibility. In the worst case, it needs to iterate `num` times.

* Space complexity: O(1)
The space complexity of the `is_prime` function is O(1) because it only uses a fixed amount of space to store the loop variable `i` and the input `num`. The space usage does not grow with the input size.

**Overall complexity:**

* Time complexity: O(n)
The overall time complexity is dominated by the `calculate_factorial` and `is_prime` functions, both of which have a time complexity of O(n).

* Space complexity: O(n)
The overall space complexity is also dominated by the `calculate_factorial` function, which has a space complexity of O(n).

Note that the complexity analysis assumes that the input size `n` is a positive integer. If `n` can be negative or a non-integer value, the complexity may be different.